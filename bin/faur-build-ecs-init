#!/usr/bin/env python3

"""
    Copyright 2020 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import re

from faur.tool.tool import Tool

g_tool = Tool('Init.c ...')

def main():
    init_c = g_tool.args.get('Init.c')
    headers = g_tool.args.get('...')

    externs = []
    components = []
    systems = []
    entities = []

    class Rule:
        def __init__(self, List, Pattern):
            self.list = List
            self.pattern = re.compile(Pattern)

    rules = [
        Rule(components, 'extern FComponent (c(_[a-zA-Z0-9]+)+);'),
        Rule(systems, 'extern FSystem (s(_[a-zA-Z0-9]+)+);'),
    ]

    for h in headers:
        for l in g_tool.files.read_text_lines(h):
            for r in rules:
                m = r.pattern.match(l)

                if m:
                    externs.append(m.group(0))
                    r.list.append(m.group(1))

                    break

    externs.sort()

    for r in rules:
        r.list.sort()

    if len(components) > 0 and len(systems) > 0:
        content = """\
//
// Generated by `{cmd}`
//
#include <faur.v.h>

{externs}

void f_ecs__populate(void)
{{
    static FComponent* const components[{components_num}] = {{
{components}
    }};

    static FSystem* const systems[{systems_num}] = {{
{systems}
    }};

    f_ecs__set(components, {components_num}, systems, {systems_num});

{entities}
}}
""".format(cmd = g_tool.get_cmd(),
           externs = '\n'.join(externs),
           components = '\n'.join([f'        &{c},' for c in components]),
           components_num = len(components),
           systems = '\n'.join([f'        &{s},' for s in systems]),
           systems_num = len(systems),
           entities = '\n'.join([f'    f_sym_set({e});' for e in entities]))
    else:
        content = f"""\
//
// Generated by `{g_tool.get_cmd()}`
//
#include <faur.v.h>

void f_ecs__populate(void)
{{
}}
"""

    g_tool.files.write_text(init_c, content)

if __name__ == '__main__':
    main()
