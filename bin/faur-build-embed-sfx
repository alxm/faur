#!/usr/bin/env python3

"""
    Copyright 2019 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import subprocess

from faur.tool.tool import FTool

g_tool = FTool('wav-file gen-file var-suffix sound-format')

def main():
    wav_file = g_tool.args.get('wav-file')
    target_file = g_tool.args.get('gen-file')
    var_name = g_tool.sanitize_c_var(g_tool.args.get('var-suffix'))
    sfx_format = g_tool.args.get('sound-format')

    if not wav_file.endswith('.wav'):
        g_tool.usage('Sound file must be a .wav file')

    if target_file.endswith('.h'):
        content = process_h(var_name)
    elif target_file.endswith('.c'):
        content = process_c(var_name, wav_file, sfx_format)
    else:
        g_tool.usage('Gen file must be a .c or .h file')

    g_tool.files.write_text(target_file, content)

def process_h(VarName):
    content = f"""\
//
// Generated by:
// {g_tool.get_cmd()}
//

extern const FSample* const FSample_{VarName};
"""

    return content

def process_c(VarName, WavFile, SoundFormat):
    sfx_bytes = []

    if SoundFormat == 'F_SOUND_FORMAT_GAMEBUINO_META':
        ret = subprocess.run(['ffmpeg',
                                '-loglevel', 'quiet',
                                '-i', WavFile,
                                '-ac', '1',
                                '-ar', '22050',
                                '-acodec', 'pcm_u8',
                                '-f', 'u8',
                                'pipe:1'],
                             stdout = subprocess.PIPE)

        if ret.returncode != 0:
            g_tool.out.error(f'ffmpeg error code {ret.returncode}')

        sfx_bytes = ret.stdout
    else:
        sfx_bytes = g_tool.files.read_bytes(WavFile)

    def format_bytes(Bytes):
        return ','.join(['0x{:0>2x}'.format(b) for b in Bytes])

    content = f"""\
//
// Generated by:
// {g_tool.get_cmd()}
//
#include <faur.v.h>

#define F__GEN_BUFFER_SIZE__{VarName} {len(sfx_bytes)}
#define F__GEN_BUFFER_DATA__{VarName} {format_bytes(sfx_bytes)}

static const uint8_t g_buffer_{VarName}[F__GEN_BUFFER_SIZE__{VarName}] = {{F__GEN_BUFFER_DATA__{VarName}}};

#if F_CONFIG_SOUND_SAMPLE_HAS_RUNTIME_OBJECT
    static FPlatformSample* g_platform_{VarName};
#endif

static const FSample FSample__{VarName} = {{
    .size = F__GEN_BUFFER_SIZE__{VarName},
    .buffer = g_buffer_{VarName},
    #if F_CONFIG_SOUND_SAMPLE_HAS_RUNTIME_OBJECT
        .u.platformIndirect = &g_platform_{VarName}
    #endif
}};

const FSample* const FSample_{VarName} = &FSample__{VarName};
"""

    return content

if __name__ == '__main__':
    main()
