#!/usr/bin/env python3

"""
    Copyright 2019 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import subprocess

from faur.tool.tool import Tool

g_tool = Tool('Sound.wav GenFile.c/.h VarName')

def main():
    wav_file = g_tool.args.get('Sound.wav')
    target_file = g_tool.args.get('GenFile.c/.h')
    var_name = g_tool.sanitize_c_var(g_tool.args.get('VarName'))

    if not wav_file.endswith('.wav'):
        g_tool.usage('Sound file must be a .wav file')

    if target_file.endswith('.h'):
        content = process_h(var_name)
    elif target_file.endswith('.c'):
        content = process_c(var_name, wav_file)
    else:
        g_tool.usage('GenFile must be a .c or .h file')

    g_tool.files.write_text(target_file, content)

def process_h(VarName):
    content = f"""\
//
// Generated by `{g_tool.get_cmd()}`
//

extern const FSample* const f_sfx_{VarName};
"""

    return content

def process_c(VarName, WavFile):
    ret = subprocess.run(['ffmpeg',
                            '-loglevel', 'quiet',
                            '-i', WavFile,
                            '-ac', '1',
                            '-ar', '22050',
                            '-acodec', 'pcm_u8',
                            '-f', 'u8',
                            'pipe:1'],
                         stdout = subprocess.PIPE)

    if ret.returncode != 0:
        g_tool.out.error(f'ffmpeg error code {ret.returncode}')

    wav_bytes = g_tool.files.read_bytes(WavFile)
    gbm_bytes = ret.stdout

    def format_bytes(Bytes):
        return ','.join(['0x{:0>2x}'.format(b) for b in Bytes])

    content = f"""\
//
// Generated by `{g_tool.get_cmd()}`
//
#include <faur.v.h>

#ifndef F__GEN_SFX_CONST
    #if F_CONFIG_FILES_EMBED_OBJ_SAMPLE_LAZY_INIT
        #define F__GEN_SFX_CONST
    #else
        #define F__GEN_SFX_CONST const
    #endif
#endif

#if F_CONFIG_SYSTEM_GAMEBUINO
    #define F__GEN_BUFFER_SIZE__{VarName} {len(gbm_bytes)}
    #define F__GEN_BUFFER_DATA__{VarName} {format_bytes(gbm_bytes)}
#else
    #define F__GEN_BUFFER_SIZE__{VarName} {len(wav_bytes)}
    #define F__GEN_BUFFER_DATA__{VarName} {format_bytes(wav_bytes)}
#endif

static const uint8_t f__sfx_buffer__{VarName}[F__GEN_BUFFER_SIZE__{VarName}] = {{F__GEN_BUFFER_DATA__{VarName}}};

static F__GEN_SFX_CONST FSample f__sfx_sample__{VarName} = {{
    F__GEN_BUFFER_SIZE__{VarName},
    f__sfx_buffer__{VarName},
    #if F_CONFIG_FILES_EMBED_OBJ_SAMPLE_LAZY_INIT
        NULL,
    #else
        (FPlatformSample*)&f__sfx_sample__{VarName},
    #endif
}};

const FSample* const f_sfx_{VarName} = (const FSample*)&f__sfx_sample__{VarName};
"""

    return content

if __name__ == '__main__':
    main()
