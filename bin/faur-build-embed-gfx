#!/usr/bin/env python3

"""
    Copyright 2019 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import re

from PIL import Image

from faur.tool.tool import FTool

def format_rgb565(Pixel):
    r, g, b = Pixel
    packed = ((r >> 3) << 11) | ((g >> 2) << 5) | ((b >> 3) << 0)

    return '0x{:0>4x}'.format(packed)

def format_rgb565b(Pixel):
    r, g, b = Pixel
    packed = ((r >> 3) << 11) | ((g >> 2) << 5) | ((b >> 3) << 0)
    packed = ((packed & 0xff) << 8) | (packed >> 8)

    return '0x{:0>4x}'.format(packed)

def format_rgba5551(Pixel):
    r, g, b = Pixel
    packed = ((r >> 3) << 11) | ((g >> 3) << 6) | ((b >> 3) << 1)

    return '0x{:0>4x}'.format(packed)

def format_rgba8888(Pixel):
    r, g, b = Pixel
    packed = (r << 24) | (g << 16) | (b << 8)

    return '0x{:0>8x}'.format(packed)

def format_argb8888(Pixel):
    r, g, b = Pixel
    packed = (r << 16) | (g << 8) | (b << 0)

    return '0x{:0>8x}'.format(packed)

def format_abgr8888(Pixel):
    r, g, b = Pixel
    packed = (b << 16) | (g << 8) | (r << 0)

    return '0x{:0>8x}'.format(packed)

g_formats = {
    'F_COLOR_FORMAT_RGB_565': format_rgb565,
    'F_COLOR_FORMAT_RGB_565_B': format_rgb565b,
    'F_COLOR_FORMAT_RGBA_5551': format_rgba5551,
    'F_COLOR_FORMAT_RGBA_8888': format_rgba8888,
    'F_COLOR_FORMAT_ARGB_8888': format_argb8888,
    'F_COLOR_FORMAT_ABGR_8888': format_abgr8888,
}

g_tool = FTool('image-file gen-file var-suffix color-key-hex screen-format render-mode')

def main():
    image_file = g_tool.args.get('image-file')
    target_file = g_tool.args.get('gen-file')
    var_name = g_tool.sanitize_c_var(g_tool.args.get('var-suffix'))
    color_key = g_tool.args.get('color-key-hex')
    scr_format = g_tool.args.get('screen-format')
    render_mode = g_tool.args.get('render-mode')

    if not re.match('^0[xX][0-9a-fA-F]{6}$', color_key):
        g_tool.usage(f'{color_key} is not a 0xRRGGBB hex')

    if scr_format not in g_formats:
        g_tool.usage(f'Invalid screen format {scr_format}')

    color_key_hex = color_key[2 : ]

    color_key_pixel = (
        int(color_key_hex[0 : 2], 16),
        int(color_key_hex[2 : 4], 16),
        int(color_key_hex[4 : 6], 16)
    )

    if target_file.endswith('.h'):
        content = process_h(var_name)
    elif target_file.endswith('.c'):
        content = process_c(var_name,
                            image_file,
                            color_key_pixel,
                            scr_format,
                            render_mode)
    else:
        g_tool.usage('Gen file must be a .c or .h file')

    g_tool.files.write_text(target_file, content)

def process_h(VarName):
    content = f"""\
//
// Generated by:
// {g_tool.get_cmd()}
//

extern const FSprite* const f_gfx_{VarName};
"""

    return content

def process_c(VarName, ImageFile, ColorKey, ScreenFormat, RenderMode):
    image = Image.open(ImageFile).convert('RGB')

    image_width, image_height = image.size
    pixels = image.load()

    grid_match = re.match('^.+_([0-9]+)x([0-9]+)\.\w+$', ImageFile)

    if grid_match:
        width = int(grid_match.group(1))
        height = int(grid_match.group(2))
    else:
        width = image_width
        height = image_height

    frames_pixels = []

    for starty in range(0, image_height, height):
        for startx in range(0, image_width, width):
            frame_pixels = []

            for y in range(starty, starty + height):
                for x in range(startx, startx + width):
                    frame_pixels.append(pixels[x, y])

            frames_pixels.append(frame_pixels)

    frames_num = len(frames_pixels)

    pixels_fmt = [g_formats[ScreenFormat](p) for f in frames_pixels for p in f]

    if RenderMode == 'F_SCREEN_RENDER_SOFTWARE':
        span_buffers = ''
        span_vars = ''

        for frame_index, frame_pixels in enumerate(frames_pixels):
            spans = spans_make(frame_pixels, width, height, ColorKey)
            spans_fmt = ','.join([str(s) for s in spans])

            span_buffers += f"""\
static const FSpriteWord f__gfx_spans__{VarName}__{frame_index}[] = {{{spans_fmt}}};
"""

            span_vars += f"""
        (FSpriteWord*)f__gfx_spans__{VarName}__{frame_index},"""

        texture_object = f"""\
{span_buffers}
static const struct {{
    FSpriteWord framesNum;
    FSpriteWord* spans[{frames_num}];
}} f__gfx_texture__{VarName} = {{
    {frames_num},
    {{{span_vars}
    }},
}};"""
        texture_assignment = f"""\
.u.textureConst = (const FPlatformTexture*)&f__gfx_texture__{VarName},"""
    else:
        texture_object = f"""\
static FPlatformTexture* f__gfx_texture__{VarName};"""
        texture_assignment = f"""\
.u.textureIndirect = &f__gfx_texture__{VarName},"""

    content = f"""\
//
// Generated by:
// {g_tool.get_cmd()}
//
#include <faur.v.h>

#if F_CONFIG_SCREEN_FORMAT != {ScreenFormat}
    #error FAUR_ERROR: Invalid F_CONFIG_SCREEN_FORMAT
#endif

#if F_CONFIG_SCREEN_RENDER != {RenderMode}
    #error FAUR_ERROR: Invalid F_CONFIG_SCREEN_RENDER
#endif

static const FColorPixel f__gfx_buffer__{VarName}[{width} * {height} * {frames_num}] = {{
    {','.join(pixels_fmt)}
}};

{texture_object}

static const FSprite f__gfx_sprite__{VarName} = {{
    .pixels = {{
        .size = {{{width}, {height}}},
        .framesNum = {frames_num},
        .bufferLen = {width} * {height},
        .bufferSize = {width} * {height} * sizeof(FColorPixel),
        .flags = F_PIXELS__CONST,
        .u.bufferConst = f__gfx_buffer__{VarName},
    }},
    {texture_assignment}
}};

const FSprite* const f_gfx_{VarName} = &f__gfx_sprite__{VarName};
"""

    return content

def spans_make(Pixels, Width, Height, ColorKey):
    # Spans format for each scanline:
    # (NumSpans << 1 | start draw/transparent), len0, len1, ...
    spans = []

    for y in range(0, Height):
        line_start = len(spans)
        span_length = 0
        last_state = 0 if Pixels[y * Width] == ColorKey else 1 # initial state

        spans.append(last_state)

        for x in range(0, Width):
            new_state = 0 if Pixels[y * Width + x] == ColorKey else 1

            if new_state == last_state:
                span_length += 1 # keep growing current span
            else:
                spans.append(span_length) # record the just-ended span length

                last_state = new_state
                span_length = 1 # start a new span from this pixel

        spans[line_start] |= (len(spans) - line_start) << 1 # record # of spans
        spans.append(span_length) # record the last span's length

    return spans

if __name__ == '__main__':
    main()
