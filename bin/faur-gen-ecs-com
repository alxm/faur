#!/usr/bin/env python3

"""
    Copyright 2017 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from faur.tool.tool import Tool

g_tool = Tool('ComponentName')

def main():
    comp_name = g_tool.args.get('ComponentName')
    comp_name_lower = comp_name.lower()

    struct_name = f'C{comp_name}'

    comp_c = f'c_{comp_name_lower}.c'
    comp_h = f'c_{comp_name_lower}.h'

    g_tool.files.assert_not_exist(comp_c, comp_h)

    g_tool.files.write_text(comp_c,
"""\
#include "c_{name}.h"

struct {ctype} {{
    int value;
}};

static void c_{name}_instanceInit({ctype}* {paramVar})
{{
    {paramVar}->value = 1;
}}

static void c_{name}_instanceFree({ctype}* {paramVar})
{{
    F_UNUSED({paramVar});
}}

F_COMPONENT(
    c_{name},
    sizeof({ctype}),
    c_{name}_instanceInit,
    c_{name}_instanceFree
);

int c_{name}_valueGet(const {ctype}* {paramVar})
{{
    return {paramVar}->value;
}}

void c_{name}_valueSet({ctype}* {paramVar}, int Value)
{{
    {paramVar}->value = Value;
}}
""".format(ctype = struct_name,
           name = comp_name_lower,
           paramVar = comp_name))

    g_tool.files.write_text(comp_h,
"""\
#pragma once

#include <faur.h>

extern FComponent c_{name};

typedef struct {ctype} {ctype};

extern int c_{name}_valueGet(const {ctype}* {paramVar});
extern void c_{name}_valueSet({ctype}* {paramVar}, int Value);
""".format(ctype = struct_name,
           name = comp_name_lower,
           paramVar = comp_name))

if __name__ == '__main__':
    main()
