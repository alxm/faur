#!/usr/bin/env python3

"""
    Copyright 2016 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from faur.tool.tool import Tool

g_tool = Tool('ProjectName')

def main():
    project_name = g_tool.args.get('ProjectName').replace(' ', '-')

    if project_name != os.path.basename(project_name):
        g_tool.out.error(f'Project name cannot be a path: {project_name}')

    project_path = os.path.abspath(project_name)

    g_tool.files.assert_not_exist(project_path)

    dir_root = Dir(project_path)
    dir_build = dir_root.add_subdir('build')
    dir_make = dir_build.add_subdir('make')
    dir_media = dir_root.add_subdir('media')
    dir_source = dir_root.add_subdir('src')

    author = '<author>'

    for key in ['USER', 'USERNAME', 'LOGNAME']:
        if key in os.environ:
            author = os.environ[key]
            break

    dir_make.write_file('Makefile',
f"""\
F_CONFIG_APP_AUTHOR := {author}
F_CONFIG_APP_NAME := {project_name}

include $(FAUR_PATH)/make/default.mk
""")

    dir_source.write_file('main.c',
f"""\
#include <faur.h>

void f_main(void)
{{
    static struct {{
        int x, y;
        FButton *up, *down, *left, *right;
    }} context;

    F_STATE_INIT
    {{
        context.x = f_screen_sizeGetWidth() / 2;
        context.y = f_screen_sizeGetHeight() / 2;

        context.up = f_button_new();
        f_button_bindKey(context.up, F_KEY_UP);
        f_button_bindButton(context.up, F_BUTTON_UP);

        context.down = f_button_new();
        f_button_bindKey(context.down, F_KEY_DOWN);
        f_button_bindButton(context.down, F_BUTTON_DOWN);

        context.left = f_button_new();
        f_button_bindKey(context.left, F_KEY_LEFT);
        f_button_bindButton(context.left, F_BUTTON_LEFT);

        context.right = f_button_new();
        f_button_bindKey(context.right, F_KEY_RIGHT);
        f_button_bindButton(context.right, F_BUTTON_RIGHT);
    }}

    F_STATE_TICK
    {{
        if(f_button_pressGet(context.up)) context.y--;
        if(f_button_pressGet(context.down)) context.y++;
        if(f_button_pressGet(context.left)) context.x--;
        if(f_button_pressGet(context.right)) context.x++;
    }}

    F_STATE_DRAW
    {{
        f_color_colorSetHex(0xaaff88);
        f_draw_fill();

        f_color_colorSetHex(0xffaa44);
        f_draw_rectangle(context.x - 40, context.y - 40, 80, 80);
    }}

    F_STATE_FREE
    {{
        f_button_free(context.up);
        f_button_free(context.down);
        f_button_free(context.left);
        f_button_free(context.right);
    }}
}}
""")

    dir_root.write_file('.gitignore',
"""\
/build/builds/
/build/shared/
/src/faur_gen/
""")

    g_tool.run_shell(f'cd {dir_root.path} && git init && git add .')
    g_tool.out.note('To build and run:')
    g_tool.out.note(f'cd {dir_make.path} && make -j run')

class Dir:
    def __init__(self, Path):
        self.path = Path
        self.name = os.path.basename(Path)

        os.mkdir(Path)

    def add_subdir(self, Name):
        return Dir(f'{self.path}/{Name}')

    def write_file(self, Name, Content):
        g_tool.files.write_text(f'{self.path}/{Name}', Content)

if __name__ == '__main__':
    main()
